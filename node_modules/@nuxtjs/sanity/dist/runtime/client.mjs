import { $fetch } from "ofetch";
const apiHost = "api.sanity.io";
const cdnHost = "apicdn.sanity.io";
const enc = encodeURIComponent;
export function getQuery(query, params = {}) {
  const baseQs = `?query=${enc(query)}`;
  return Object.keys(params).reduce((current, param) => {
    return `${current}&${enc(`$${param}`)}=${enc(
      JSON.stringify(params[param])
    )}`;
  }, baseQs);
}
export const getByteSize = (query) => encodeURI(query).split(/%..|./).length;
export function createClient(config) {
  const {
    useCdn,
    projectId,
    dataset,
    apiVersion = "1",
    withCredentials,
    token
  } = config;
  const fetchOptions = {
    credentials: withCredentials ? "include" : "omit",
    headers: {
      ...token ? { Authorization: `Bearer ${token}` } : {},
      Accept: "application/json",
      ...process.server ? { "accept-encoding": "gzip, deflate" } : {}
    }
  };
  return {
    clone: () => createClient({
      useCdn,
      projectId,
      dataset,
      apiVersion,
      withCredentials,
      token
    }),
    /**
     * Perform a fetch using GROQ syntax.
     */
    async fetch(query, params) {
      const qs = getQuery(query, params);
      const usePostRequest = getByteSize(qs) > 9e3;
      const host = useCdn && !usePostRequest ? cdnHost : apiHost;
      const urlBase = `https://${projectId}.${host}/v${apiVersion}/data/query/${dataset}`;
      const { result } = usePostRequest ? await $fetch(urlBase, {
        method: "post",
        body: { query, params }
      }) : await $fetch(`${urlBase}${qs}`, fetchOptions);
      return result;
    }
  };
}
